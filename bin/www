#!/usr/bin/env node

/**
 * Module dependencies.
 */

const http = require("http");
const {app,sessionObj} = require("../app");
const   sharedsession = require("express-socket.io-session");
const router = require("../routes");
/**
 * Create HTTP server.
 */

const server = http.createServer(app);

/**
 * Log errors.
 */

app.use((err, req, res, next) => {
  // always log the error
  console.error("error", req.method, req.path, err);

  // only render if the error ocurred before sending the response
  if (!res.headersSent) {
    res.status(500);
    res.render("error", { error: err });
  }

  // catch 404 and render a not-found.hbs template
  if (res.headersSent) {
    res.status(404);
    res.render("error", { error: err });
  }
});

/**
 * Event listener for HTTP server "error" event.
 */

server.on("error", (error) => {
  if (error.syscall !== "listen") {
    throw error;
  }

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case "EACCES":
      console.error(`Port ${process.env.PORT} requires elevated privileges`);
      process.exit(1);
      break;
    case "EADDRINUSE":
      console.error(`Port ${process.env.PORT} is already in use`);
      process.exit(1);
      break;
    default:
      throw error;
  }
});

/**
 * Listen on provided port.
 */

const toto = server.listen(process.env.PORT, () => {
  console.log(`Listening on http://localhost:${process.env.PORT}`);
});

//SETUP CHAT
const io = require('socket.io')(toto);
io.use(sharedsession(sessionObj))
const users = {}

router.get("login",(req,res) => {
  //feahiufahefieaae

  req.session.currentUser = dbRes;


})
io.on('connection', socket => {
  console.log('connecter');
  console.log(socket.handshake.session)
    users[socket.id] = name
    socket.broadcast.emit('user-connected', name)
  

socket.on('send-chat-message',message =>{
  // message BDD
  console.log(socket.handshake.session.currentUser._id)
  socket.broadcast.emit('chat-message',{message:message, name:users[socket.id]})
})
socket.on('diconnect', () => {
  console.log("i have been disconnected")
  socket.broadcast.emit('user-diconnected', users[socket.id])
  delete users [socket.id]
})
})
